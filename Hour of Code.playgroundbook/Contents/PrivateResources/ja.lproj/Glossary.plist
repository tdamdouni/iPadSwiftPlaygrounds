<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Terms</key>
	<dict>
		<key>Boolean</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`true`（真）または`false`（偽）のいずれかの値を持つ型。たとえば、`9 &lt; 7`では、`9`は`7`よりも小さくないので、ブール値の`false`（偽）が返されます。</string>
				<key>Title</key>
				<string>論理値</string>
			</dict>
		</dict>
		<key>Int</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>整数を入れるための型。整数は、小数点以下を持たない数です（`10`や`-42`など）。</string>
				<key>Title</key>
				<string>Int</string>
			</dict>
		</dict>
		<key>String</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一連の文字を入れるための型。たとえば、`“hello, world”`や`“dancing kittens”`などです。</string>
				<key>Title</key>
				<string>文字列</string>
			</dict>
		</dict>
		<key>Swift</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>Appleが開発したプログラミング言語。iPhone、iPad、Mac、Apple Watch、Apple TV向けのAppやアプリケーションを作るために使われます。</string>
				<key>Title</key>
				<string>Swift</string>
			</dict>
		</dict>
		<key>algorithm</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>問題を解くための段階的な手順または規則。たとえば、お茶を入れるための一連の手順は、アルゴリズムといえます。</string>
				<key>Title</key>
				<string>アルゴリズム</string>
			</dict>
		</dict>
		<key>argument</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の動作を変えるために関数に指定する入力値。たとえば、`move(distance: 3)`という関数呼び出しでは、`3`という引数で、何マス移動するかを指定しています。</string>
				<key>Title</key>
				<string>引数</string>
			</dict>
		</dict>
		<key>arithmetic operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の数値を使って基本的な計算を行うための記号（`+`、`-`、`*`、`/`など）。たとえば、`42 / 7`や`17 - 5`には、算術演算子が使われています。</string>
				<key>Title</key>
				<string>算術演算子</string>
			</dict>
		</dict>
		<key>array</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ型の項目を順番に並べて保存するための入れ物。同じ項目を違う場所に入れることもできます。たとえば、`highScores = [37, 34, 29, 29, 26]`は、整数の配列です。</string>
				<key>Title</key>
				<string>配列</string>
			</dict>
		</dict>
		<key>array out of bounds error</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>配列の範囲を超えるインデックスを使って配列内の項目を取り出そうとするときに起こるエラー。たとえば、`[17, 42]`という配列では、インデックス`2`は範囲外になります。</string>
				<key>Title</key>
				<string>配列の範囲外エラー</string>
			</dict>
		</dict>
		<key>assignment</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数または定数の値を設定する操作。</string>
				<key>Title</key>
				<string>代入</string>
			</dict>
		</dict>
		<key>assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数に値を設定するための記号（`=`）。たとえば、`greeting = “hello”`では、`greeting`（挨拶）の値として`“hello”`が設定されます。</string>
				<key>Title</key>
				<string>代入演算子</string>
			</dict>
		</dict>
		<key>bug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションが正しく動かない原因となるコードのミス。
</string>
				<key>Title</key>
				<string>バグ</string>
			</dict>
		</dict>
		<key>call</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の関数を実行するようにプログラムに命令すること。たとえば、コードの中で`moveForward()`（進む）関数を呼び出すと、この関数で定義された操作が実行されます。</string>
				<key>Title</key>
				<string>発信</string>
			</dict>
		</dict>
		<key>coding</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コマンド、コード構造、アルゴリズムを組み立ててコンピュータプログラムを作ること。
</string>
				<key>Title</key>
				<string>コーディング</string>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string>Document1.playgroundchapter/Exercise1.playgroundpage</string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string>コマンド</string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションに特定の操作を実行することを命令するためのコード。
</string>
				<key>Title</key>
				<string>コマンド</string>
			</dict>
		</dict>
		<key>comparison operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つの値を比較するための記号（`==`、`!=`、`&lt;`、`&gt;`、`&lt;=`、`&gt;=`など）。`if`文や`while`ループの条件として、比較の結果がブール値の`true`（真）であるかどうかを調べるためによく使われます。たとえば、`6 &gt; 8`では、`6`と`8`が比較されて、`false`（偽）が返されます。</string>
				<key>Title</key>
				<string>比較演算子</string>
			</dict>
		</dict>
		<key>composition</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string>Document2.playgroundchapter/Exercise1.playgroundpage</string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string>関数</string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プログラムの小さい部分を組み合わせて大きい問題を解くこと。
</string>
				<key>Title</key>
				<string>コンポジション</string>
			</dict>
		</dict>
		<key>compound assignment operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>演算（足し算や引き算など）と代入（変数に値を設定する操作）を組み合わせた演算子。たとえば、`a`の値が`1`の場合、`a += 3`と書くと、`1`に`3`を足した結果が`a`に代入されて、`a`の値は`4`になります。</string>
				<key>Title</key>
				<string>複合代入演算子</string>
			</dict>
		</dict>
		<key>conditional code</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定した条件に当てはまるときにだけ実行されるコード。たとえば、`if`文や`while`ループ内のコードは、指定した条件が`true`（真）の場合または`true`（真）の間だけ実行されます。</string>
				<key>Title</key>
				<string>条件分岐コード</string>
			</dict>
		</dict>
		<key>constant</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変更できない値を保存するための、名前の付いた入れ物。</string>
				<key>Title</key>
				<string>定数</string>
			</dict>
		</dict>
		<key>debug</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーションが正しく動かない原因となるコードのミスを見つけて直すこと。</string>
				<key>Title</key>
				<string>デバッグ</string>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アプリケーション内に新しいもの（関数、変数、カスタム型など）を作るためのコード。たとえば、`let planet = “Earth”`では、`planet`（宇宙）という名前の新しい定数が作られ、その値が`"Earth"`（地球）に設定されます。</string>
				<key>Title</key>
				<string>宣言</string>
			</dict>
		</dict>
		<key>decomposition</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>大きい問題を、解きやすいように、いくつかの小さい部分に分けること。</string>
				<key>Title</key>
				<string>分解</string>
			</dict>
		</dict>
		<key>define</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string>Document2.playgroundchapter/Exercise2.playgroundpage</string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string>関数</string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>新しく作成したコード（関数、変数、カスタム型など）の値や動作を指定すること。たとえば、関数を定義するときは、その関数で実行する操作を示す一連のコマンドを指定します。</string>
				<key>Title</key>
				<string>定義</string>
			</dict>
		</dict>
		<key>dot notation</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティを取り出すときや、インスタンスのメソッドを呼び出すときに使う構文。たとえば、`expert.toggleSwitch()`では、`expert`（エキスパート）インスタンスの`toggleSwitch()`（スイッチを切り替える）メソッドが呼び出されます。</string>
				<key>Title</key>
				<string>ドット表記</string>
			</dict>
		</dict>
		<key>else block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文に含まれる最後のコードブロック。`if`文に含まれるすべての条件が`false`（偽）の場合に実行されます。</string>
				<key>Title</key>
				<string>elseブロック</string>
			</dict>
		</dict>
		<key>else if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文で、`if`ブロックと前の`else if`ブロック（ある場合）で調べられなかった条件を調べるためのコードブロック。</string>
				<key>Title</key>
				<string>else ifブロック</string>
			</dict>
		</dict>
		<key>enumeration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>同じ仲間の異なる値（列挙ケース）を定義するための型。たとえば、`Direction`（方向）という列挙は、基本的な方位である`north`（北）、`south`（南）、`east`（東）、`west`（西）の4つのケースを定義しています。変数や定数に列挙を代入するときは、その中のケースを1つだけ選びます。たとえば、`let compassDirection: Direction = .north`のように書きます。</string>
				<key>Title</key>
				<string>列挙</string>
			</dict>
		</dict>
		<key>for loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の回数だけ繰り返し実行されるコードブロック。</string>
				<key>Title</key>
				<string>forループ</string>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>FirstUse</key>
			<dict>
				<key>PageReference</key>
				<string>Document2.playgroundchapter/Exercise2.playgroundpage</string>
				<key>_LOCALIZABLE_</key>
				<dict>
					<key>Title</key>
					<string>関数</string>
				</dict>
			</dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>必要なときにすばやく実行できるように、一連のコマンドに名前を付けたもの。</string>
				<key>Title</key>
				<string>関数</string>
			</dict>
		</dict>
		<key>if block</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>`if`文に含まれる最初のコードブロック。`if`文の条件が`true`（真）の場合に実行されます。</string>
				<key>Title</key>
				<string>ifブロック</string>
			</dict>
		</dict>
		<key>if statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の条件によってコードを実行するかどうかを決めるためのコード構造。`if`文内の最初のコードブロックを、`if`ブロックといいます。`if`文には、追加の条件を調べるための`else if`ブロックや、`else`ブロックが含まれることもあります。</string>
				<key>Title</key>
				<string>if文</string>
			</dict>
		</dict>
		<key>index</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>配列内での各項目の位置を示す番号。</string>
				<key>Title</key>
				<string>インデックス</string>
			</dict>
		</dict>
		<key>initialization</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の型の新しいインスタンスを作ること。同時に、その型のプロパティに初期値を設定することもあります。</string>
				<key>Title</key>
				<string>初期化</string>
			</dict>
		</dict>
		<key>inner loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>別の（外側の）ループ（繰り返し実行されるコードブロック）に含まれるループ。</string>
				<key>Title</key>
				<string>内側のループ</string>
			</dict>
		</dict>
		<key>instance</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の型の値。たとえば、`let greenPortal = Portal()`では、`greenPortal`（緑のワープ）は`Portal`（ワープ）型のインスタンスになります。</string>
				<key>Title</key>
				<string>インスタンス</string>
			</dict>
		</dict>
		<key>iteration</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の処理を繰り返すこと。たとえば、配列内の各項目に同じ操作をするなどです。</string>
				<key>Title</key>
				<string>反復処理</string>
			</dict>
		</dict>
		<key>local variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数やループなど、特定の命令文の中で定義された変数。その命令文の外では使えません。</string>
				<key>Title</key>
				<string>ローカル変数</string>
			</dict>
		</dict>
		<key>logical AND operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つのブール値が両方とも`true`（真）であれば全体を`true`とみなすための記号（`&amp;&amp;`）。たとえば、`a &amp;&amp; b`は、`a`と`b`の両方が`true`の場合にのみ、`true`になります。</string>
				<key>Title</key>
				<string>論理AND演算子</string>
			</dict>
		</dict>
		<key>logical NOT operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コードのブール値を逆にするための記号（`!`）。たとえば、`a`が`true`（真）の場合、`!a`は`false`（偽）になります。</string>
				<key>Title</key>
				<string>論理NOT演算子</string>
			</dict>
		</dict>
		<key>logical OR operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>2つのブール値の少なくとも一方がtrue（真）であれば全体をtrueとみなすための記号（||）。たとえば、a || bは、aまたはbのどちらか（あるいは両方）がtrueであれば、trueになります。
</string>
				<key>Title</key>
				<string>論理OR演算子</string>
			</dict>
		</dict>
		<key>logical operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ブール論理値である`true`（真）と`false`（偽）を逆にしたり組み合わせたりするための記号（`&amp;&amp;`、`||`、`!`など）。</string>
				<key>Title</key>
				<string>論理演算子</string>
			</dict>
		</dict>
		<key>loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>特定の回数だけ繰り返し実行されるコードブロック（`for`ループなど）、または、条件が当てはまる間は繰り返し実行されるコードブロック（`while`ループなど）。</string>
				<key>Title</key>
				<string>ループ</string>
			</dict>
		</dict>
		<key>method</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>型によって定義された関数（一連のコマンド）。</string>
				<key>Title</key>
				<string>メソッド</string>
			</dict>
		</dict>
		<key>nest</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ループ（繰り返し実行されるコードブロック）の中に別のループを入れること。</string>
				<key>Title</key>
				<string>ネスト</string>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>1つ以上の値を使って操作を行うための記号（`+`、`-`、`&amp;&amp;`など）。たとえば、`1 + 2`では、加算演算子（`+`）によって、数字の`1`と`2`が足し算されます。</string>
				<key>Title</key>
				<string>演算子</string>
			</dict>
		</dict>
		<key>outer loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>別の（内側の）ループ（繰り返し実行されるコードブロック）を含むループ。</string>
				<key>Title</key>
				<string>外側のループ</string>
			</dict>
		</dict>
		<key>parameter</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>関数の定義で使われる、関数に指定する入力値の名前。たとえば、`move(distance: Int)`では、`distance`（距離）が、Int型の値を受け取るパラメータになります。</string>
				<key>Title</key>
				<string>パラメータ</string>
			</dict>
		</dict>
		<key>pattern</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>一連の状況やデータの繰り返し。
</string>
				<key>Title</key>
				<string>パターン</string>
			</dict>
		</dict>
		<key>property</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>型によって定義された変数（値を保存するための、名前の付いた入れ物）。</string>
				<key>Title</key>
				<string>プロパティ</string>
			</dict>
		</dict>
		<key>pseudocode</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>アルゴリズムを言葉で説明したもの。たいていは、ふだん使う言葉とコードの両方を組み合わせて書きます。
</string>
				<key>Title</key>
				<string>疑似コード</string>
			</dict>
		</dict>
		<key>reusability</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プログラム内のさまざまな場所で利用できるというコードの特性。
</string>
				<key>Title</key>
				<string>再利用可能</string>
			</dict>
		</dict>
		<key>right-hand rule</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>迷路を解くためのアルゴリズムでよく使われる規則の1つで、キャラクターの右側に常に壁があるようにして進む方法。</string>
				<key>Title</key>
				<string>右手法</string>
			</dict>
		</dict>
		<key>state</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変数、プログラム、またはシステムに、特定の時点で保存されている情報。</string>
				<key>Title</key>
				<string>状態</string>
			</dict>
		</dict>
		<key>statement</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プログラムのコードを分類するための構造（ループや`if`文など）。</string>
				<key>Title</key>
				<string>命令文</string>
			</dict>
		</dict>
		<key>syntax</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>コンピュータが理解して実行できるようにコードを書くための規則。</string>
				<key>Title</key>
				<string>構文</string>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>プロパティ（特徴）とメソッド（動作）によってデータの種類を分けるための、名前の付いたグループ。</string>
				<key>Title</key>
				<string>型</string>
			</dict>
		</dict>
		<key>variable</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>変更できる値を保存するための、名前の付いた入れ物。</string>
				<key>Title</key>
				<string>変数</string>
			</dict>
		</dict>
		<key>while loop</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>指定した条件が`true`（真）になる間は繰り返し実行されるコードブロック。条件が`false`（偽）に変わると、ループの実行は終了します。</string>
				<key>Title</key>
				<string>whileループ</string>
			</dict>
		</dict>
		<key>wireframe</key>
		<dict>
			<key>_LOCALIZABLE_</key>
			<dict>
				<key>Definition</key>
				<string>ステージ内のアイテム（宝石、スイッチ、ブロックなど）の輪郭。実行するたびにランダムに置かれるアイテムが現れる可能性のある場所を示すために使われます。</string>
				<key>Title</key>
				<string>ワイヤフレーム</string>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
